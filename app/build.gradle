plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

ext {
    versionMajor = 0 // Major
    versionMinor = 0 // Minor
    versionPatch = 1 // Patches, updates
    versionClassifier = null
    versionRevision = "-revision-1"
    isSnapshot = false
    minSdk = 26
    targetSdk = 33
}

android {
    compileSdk COMPILE_SDK_VERSION as int

    signingConfigs {
        Properties localProps = new Properties()
        if (rootProject.file('local.properties').exists()) {
            localProps.load(rootProject.file('local.properties').newDataInputStream())
        }
        release {
            /*storeFile file(localProps.RELEASE_STORE_FILE)
            storePassword localProps.RELEASE_STORE_PASSWORD
            keyAlias localProps.RELEASE_KEY_ALIAS
            keyPassword localProps.RELEASE_KEY_PASSWORD*/

            /*enableV3Signing = true
            enableV4Signing = true*/
        }
    }

    defaultConfig {
        applicationId "com.aiavatar.app"
        minSdk(project.ext.minSdk)
        targetSdk(project.ext.targetSdk)
        versionCode(generateVersionCode())
        versionName(generateVersionName())
        resConfigs "en"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main {
            // The libs directory contains prebuilt libraries that are used by the
            // app's library defined in CMakeLists.txt via an IMPORTED target.
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        pickFirst "**/lib/**"
    }

    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"

            // buildConfigField "String", "BASE_URL", '"http://192.168.0.102:3020/api/v1/"'
            buildConfigField "String", "BASE_URL", '"https://ai.hifrds.com/api/v1/"'
            // buildConfigField "String", "BASE_URL", '"http://3.6.31.96/api/v1/"'
            buildConfigField "String", "THUMBNAIL_BASE_URL", '"https://ai.hifrds.com/thumbnail/"'
            // buildConfigField "String", "SOCKET_URL", '"http://192.168.0.102:3020/"'
            buildConfigField "String", "SOCKET_URL", '"http://43.205.53.52"'
            buildConfigField "String", "ENV", '"dev"'
            buildConfigField "boolean", "IS_SECURED", "false"
            buildConfigField "String", "S3_BUCKET", '"https://d19quh86lv8eyv.cloudfront.net"'
            // https://d19quh86lv8eyv.cloudfront.net/aiAvatar/
        }

        prod {
            dimension "default"

            // buildConfigField "String", "BASE_URL", '"http://192.168.0.102:3020/api/v1/"'
            buildConfigField "String", "BASE_URL", '"https://ai.hifrds.com/api/v1/"'
            buildConfigField "String", "THUMBNAIL_BASE_URL", '"http://43.205.53.52/thumbnail/"'
            // buildConfigField "String", "SOCKET_URL", '"http://192.168.0.102:3020/"'
            buildConfigField "String", "SOCKET_URL", '"http://43.205.53.52/"'
            buildConfigField "String", "ENV", '"prod"'
            buildConfigField "boolean", "IS_SECURED", "true"
            buildConfigField "String", "S3_BUCKET", '""'
        }
    }
}

dependencies {
    implementation(fileTree(includes: ["*.jar", "*.aar"], dir: "libs"))

    implementation 'androidx.core:core-ktx:1.7.0'

    implementation("androidx.activity:activity-ktx:1.6.1")
    implementation("androidx.fragment:fragment-ktx:1.3.1")

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
    implementation("androidx.security:security-crypto-ktx:1.1.0-alpha04")
    implementation("androidx.core:core-splashscreen:1.0.0")

    /* Google Services */
    implementation("com.google.android.play:core-ktx:1.8.1")
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    implementation("com.google.android.gms:play-services-auth:20.4.0")


    /* Firebase */
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'

    /* Google libs */
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.datastore:datastore:1.0.0"

    /* ML Kit */
    implementation("com.google.mlkit:face-detection:16.1.5")

    /* Kotlinx Coroutines */
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
    /* Kotlinx Serialization */
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1")

    /* Hilt */
    implementation "com.google.dagger:hilt-android:$hilt_version"
    testImplementation 'org.junit.jupiter:junit-jupiter'
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Room
    def room_version = "2.5.0-alpha01"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Work
    def work_version_old = "2.4.0"
    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation 'androidx.hilt:hilt-work:1.0.0'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    /* Timber */
    implementation 'com.jakewharton.timber:timber:5.0.1'

    /* EventBus */
    implementation 'org.greenrobot:eventbus:3.3.1'

    /* Lottie Animation */
    implementation 'com.airbnb.android:lottie:5.0.3'

    /* OTP View */
    implementation("com.github.rajputmukesh748:MukeshOtpView:1.0.0")

    /* Retrofit */
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    /* Exoplayer */
    /*implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-rtmp:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"*/

    /* Exoplayer */
    /*implementation 'com.google.android.exoplayer:exoplayer:2.17.1'
    androidTestImplementation 'junit:junit:4.12'*/

    /* Navigation Components */
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation("androidx.hilt:hilt-navigation:1.0.0")
    implementation("androidx.hilt:hilt-navigation-fragment:1.0.0")

    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    /* Lifecycle */
    def lifecycle_version = "2.5.1"
    def lifecycle_view_model_version = "2.4.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_view_model_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_view_model_version"
    implementation "androidx.lifecycle:lifecycle-common:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    def glide_version = "4.13.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    /* Socket Connection */
    implementation("io.socket:socket.io-client:2.0.0") {
        exclude group: 'org.json', module: 'json'
    }

    /* Time Convertor */
    implementation("com.jakewharton.threetenabp:threetenabp:1.4.1")

    /* Lottie Animation */
    implementation 'com.airbnb.android:lottie:5.0.3'

    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    /* External projects */
    implementation(project(":circular-progress-button"))

    /* Tab Indicator */
    /*implementation 'me.relex:circleindicator:2.1.6'*/
    implementation 'com.github.zhpanvip:viewpagerindicator:1.2.1'

    // Core library
    def  androidXTestVersion = '1.5.0'
    androidTestImplementation("androidx.test:core:$androidXTestVersion")
    androidTestImplementation("androidx.arch.core:core-testing:2.1.0")
    androidTestImplementation("androidx.fragment:fragment-testing:1.5.5")

    // AndroidJUnitRunner and JUnit Rules
    def testRunnerVersion = '1.5.2'
    def testRulesVersion = '1.4.0'
    androidTestImplementation("androidx.test:runner:$testRunnerVersion")
    androidTestImplementation("androidx.test:rules:$testRulesVersion")

    // Assertions
    def testJunitVersion = '1.1.5'
    def truthVersion = '1.5.0'
    androidTestImplementation("androidx.test.ext:junit:$testJunitVersion")
    androidTestImplementation("androidx.test.ext:truth:$truthVersion")
    testImplementation("com.google.truth:truth:1.1.3")

    // Espresso dependencies
    def espressoVersion = '3.5.1'
    androidTestImplementation( "androidx.test.espresso:espresso-core:$espressoVersion")
    androidTestImplementation( "androidx.test.espresso:espresso-contrib:$espressoVersion")
    androidTestImplementation( "androidx.test.espresso:espresso-intents:$espressoVersion")
    androidTestImplementation( "androidx.test.espresso:espresso-accessibility:$espressoVersion")
    androidTestImplementation( "androidx.test.espresso:espresso-web:$espressoVersion")
    androidTestImplementation( "androidx.test.espresso.idling:idling-concurrent:$espressoVersion")

    // The following Espresso dependency can be either "implementation",
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK"s compile classpath or the test APK
    // classpath.
    androidTestImplementation( "androidx.test.espresso:espresso-idling-resource:$espressoVersion")

    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    androidTestImplementation("junit:junit:4.13.2")

    testImplementation ('org.threeten:threetenbp:1.6.0'){
        exclude group:'com.jakewharton.threetenabp', module:'threetenabp'
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
private Integer generateVersionCode() {
    return ext.minSdk * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

@SuppressWarnings("GrMethodMayBeStatic")
private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null && ext.isSnapshot) {
        ext.versionClassifier = "SNAPSHOT"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return versionName;
}